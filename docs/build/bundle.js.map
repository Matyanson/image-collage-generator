{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../node_modules/idb-keyval/dist/index.js","../../src/writable-stores.ts","../../src/store.ts","../../src/components/Gallery/Item.svelte","../../src/components/Gallery/index.svelte","../../src/components/ImgUploader.svelte","../../src/components/RedditUploader/getPosts.ts","../../src/components/RedditUploader/index.svelte","../../src/components/Collage/helper.ts","../../src/components/Collage/index.svelte","../../src/components/Collage/generatorFunctions.ts","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic – if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n","import { writable } from \"svelte/store\";\r\nimport * as idb from \"idb-keyval\";\r\nconst { get, set } = idb;\r\nexport const wStorage = (key, initValue) => {\r\n    const store = writable(initValue);\r\n    if (typeof Storage === 'undefined')\r\n        return store;\r\n    const storedValueStr = localStorage.getItem(key);\r\n    if (storedValueStr != null)\r\n        store.set(JSON.parse(storedValueStr));\r\n    store.subscribe((val) => {\r\n        localStorage.setItem(key, JSON.stringify(val));\r\n    });\r\n    return store;\r\n};\r\nexport const wIDatabase = (key, initValue) => {\r\n    const store = writable(initValue);\r\n    if (typeof indexedDB === 'undefined')\r\n        return store;\r\n    (async () => {\r\n        const storedValue = await get(key);\r\n        if (storedValue != null)\r\n            store.set(storedValue);\r\n    })();\r\n    store.subscribe((val) => {\r\n        set(key, val);\r\n    });\r\n    return store;\r\n};\r\n","import { wIDatabase } from \"./writable-stores\";\r\nimport * as idb from \"idb-keyval\";\r\nimport { get } from \"svelte/store\";\r\nexport const images = createImagesCollection();\r\nfunction createImagesCollection() {\r\n    //const { subscribe, update, set } = wIDatabase<ImgData[]>('chosen-images', []);\r\n    const { subscribe, update, set } = wIDatabase('chosen-images', []);\r\n    return {\r\n        subscribe,\r\n        push: (...items) => {\r\n            update(old => [...old, ...items]);\r\n        },\r\n        delete: (...indexes) => {\r\n            update(old => {\r\n                var _a;\r\n                for (let i of indexes) {\r\n                    if ((_a = old[i]) === null || _a === void 0 ? void 0 : _a.FullResKey)\r\n                        idb.del(old[i].FullResKey);\r\n                    old[i] = null;\r\n                }\r\n                return old.filter(x => x);\r\n            });\r\n        },\r\n        get: () => {\r\n            return get(images);\r\n        },\r\n        getLink: async (index) => {\r\n            const item = get(images)[index];\r\n            if (item.FullResKey)\r\n                return await idb.get(item.FullResKey);\r\n            return item.url;\r\n        }\r\n    };\r\n}\r\n","<script lang=\"ts\">\r\nimport type { ImgData } from \"../../models/ImgData\";\r\n\r\n    import { images } from \"../../store\";\r\n\r\n    export let data: ImgData;\r\n    export let selected: boolean;\r\n</script>\r\n\r\n<img class:selected on:click src={data.url} alt={data.name} />\r\n\r\n<style>\r\n    img {\r\n\t\tdisplay: block;\r\n\t\twidth: 150px;\r\n\t\theight: 150px;\r\n\t\tobject-fit: cover;\r\n\t\tmargin: 5px;\r\n        cursor: pointer;\r\n\t}\r\n    img:hover {\r\n        outline: 5px solid crimson;\r\n    }\r\n    img.selected {\r\n        outline: 5px solid hsl(43deg 74% 60%);\r\n    }\r\n</style>","<script lang=\"ts\">\r\nimport { xlink_attr } from \"svelte/internal\";\r\n\r\n    import { images } from \"../../store\";\r\n\timport Item from \"./Item.svelte\";\r\n\r\n\tlet selected: { [key: number]: boolean} = {};\r\n    \r\n\tfunction deleteSelected() {\r\n\t\tconst indexes = Object.entries(selected)\r\n\t\t.filter(x => x[1])\r\n\t\t.map(x => Number(x[0]));\r\n\t\timages.delete(...indexes);\r\n\t\tselected = {};\r\n\t}\r\n\r\n\tfunction invertSelection() {\r\n\t\tselected = Object.fromEntries($images.map((x, i) => [i, !selected[i]]));\r\n\t}\r\n</script>\r\n\r\n<div class=\"gallery\">\r\n    <div class=\"header\">\r\n\t\t<button on:click={deleteSelected}>delete</button>\r\n\t\t<button on:click={() => selected = {}}>unselect</button>\r\n\t\t<button on:click={invertSelection}>invert selection</button>\r\n    </div>\r\n    <div class=\"content\">\r\n        {#each $images as image, i}\r\n        <Item on:click={() => selected[i] = !selected[i]} data={image} selected={selected[i]} />\r\n        {/each}\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .content {\r\n\t\tdisplay: flex;\r\n\t\tflex-flow: row wrap;\r\n\t\tjustify-content: center;\r\n\t\tpadding: 5px;\r\n\t\tbackground: hsl(348, 83%, 17%);\r\n\t}\r\n</style>","<script lang=\"ts\">\r\nimport { images } from \"../store\";\r\nimport * as idb from \"idb-keyval\";\r\nimport type { ImgData } from \"../models/ImgData\";\r\n\r\n\r\n    const onUpload = async (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        const { files } = target;\r\n\r\n        for(const file of files) {\r\n            saveImageURL(file);\r\n        }\r\n    }\r\n\r\n    function saveImageURL(file: File) {\r\n        const reader = new FileReader();\r\n\r\n        reader.readAsDataURL(file);\r\n\r\n        reader.onload = async () => {\r\n            if(typeof(reader.result) == \"string\"){\r\n                const url = reader.result;\r\n                let newImg: ImgData = { name: file.name, url };\r\n                const maxArea = 300 * 300;\r\n                const limit = 150000; //150kB\r\n                if(file.size > limit) {\r\n                    console.log(file.size);\r\n                    newImg.url = await resizeImg(url, maxArea);\r\n                    newImg.FullResKey = saveLargeImage(url);\r\n                }\r\n\r\n                images.push(newImg);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function resizeImg(url: string, targetArea: number): Promise<string> {\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        const img = await getImageFromUrl(url);\r\n        const area = img.width * img.height;\r\n        const scale = Math.sqrt(targetArea / area);\r\n        const width = Math.round(img.width * scale);\r\n        const height = Math.round(img.height * scale);\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n        \r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    function getImageFromUrl(url: string): Promise<HTMLImageElement> {\r\n        return new Promise( resolve => {\r\n            const img = new Image();\r\n            img.src = url;\r\n            img.onload = () => resolve(img);\r\n        })\r\n    }\r\n\r\n    function saveLargeImage(url: string): string {\r\n        const key = Date.now().toString();\r\n        idb.set(key, url);\r\n        return key;\r\n    }\r\n</script>\r\n\r\n<input type=\"file\" multiple accept=\"image/*\" on:change={onUpload}/>","async function getPosts(baseUrl, options) {\r\n    let { subreddits, keywords, nsfw, count = 10 } = options;\r\n    if (subreddits.length == 0)\r\n        subreddits = [''];\r\n    if (keywords.length == 0)\r\n        keywords = [''];\r\n    baseUrl += baseUrl.includes('?') ? '&' : '?';\r\n    const url = baseUrl + 'include_over_18=' + (nsfw ? 'on' : 'off');\r\n    subreddits = subreddits.map(x => x.toLowerCase());\r\n    keywords = keywords.map(x => x.toLowerCase());\r\n    const limit = Math.min(count, 100);\r\n    const posts = [];\r\n    let data = await fetchReddit(`${url}&limit=${limit}`);\r\n    let items = data.children;\r\n    const filter = (item) => {\r\n        let data = item.data;\r\n        return subreddits.some(s => data.subreddit.toLowerCase().includes(s)) ||\r\n            keywords.some(k => data.title.toLowerCase().includes(k));\r\n    };\r\n    for (let i = 0; i < items.length; i++) {\r\n        if (filter(items[i]))\r\n            posts.push(items[i].data);\r\n    }\r\n    let loadedCount = items.length;\r\n    while ((data === null || data === void 0 ? void 0 : data.after) && loadedCount < count) {\r\n        data = await fetchReddit(baseUrl + '&after=' + data.after);\r\n        items = data.children;\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (filter(items[i]))\r\n                posts.push(items[i].data);\r\n        }\r\n        loadedCount += items.length;\r\n    }\r\n    return posts;\r\n}\r\nasync function fetchReddit(url) {\r\n    try {\r\n        console.log('fetch', url);\r\n        const res = await fetch(url);\r\n        if (res.status == 403)\r\n            console.log(\"forbidden, don't forget to sign into reddit\");\r\n        console.log(res);\r\n        const jsonData = await res.json();\r\n        return jsonData.data;\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\nexport default getPosts;\r\n","<script lang=\"ts\">\r\n    import type { searchOptions } from \"./getPosts\";\r\n    import getPosts from \"./getPosts\";\r\n    import { images } from '../../store';\r\n\r\n    let mode = 0;\r\n    let customUrl = \"\";\r\n    let subsStr = \"\";\r\n    let keywordsStr = \"\";\r\n    let username = \"\";\r\n    let userCategories = [\"upvoted\", \"posts\"];\r\n    let selectedCategory;\r\n    let options: searchOptions;\r\n    $: options = {\r\n        subreddits: splitToItems(subsStr),\r\n        keywords: splitToItems(keywordsStr),\r\n        nsfw: true,\r\n        count: 5\r\n    }\r\n\r\n    function parseUrl(): string {\r\n        let res = 'https://www.reddit.com';\r\n        switch(mode) {\r\n            case 0: res += `/user/${username}/${selectedCategory}`; break;\r\n            case 1: res += `/search/?q=${options.keywords.join(' ')}`; break;\r\n            case 2: res = customUrl; break;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    async function load() {\r\n        let url = parseUrl();\r\n        let parts = url.split(/\\/\\?|\\?/);\r\n        url = `${parts[0]}.json${parts[1] ? '?'+parts[1] : ''}`;\r\n        if(mode == 1) options.keywords = [];\r\n        const posts = await getPosts(url, options);\r\n\r\n        for(let post of posts) {\r\n            images.push({\r\n                url: post?.url_overridden_by_dest ?? post?.url,\r\n                name: post?.title\r\n            });\r\n        }\r\n    }\r\n\r\n    function splitToItems(s: string) {\r\n        return s.split(/[ ,;]/).filter(lab => lab.trim().length > 0);\r\n    }\r\n\r\n</script>\r\n<div class=\"redditSearch\">\r\n    <div class=\"head\">\r\n        <button on:click={() => mode = 0}>user</button>\r\n        <button on:click={() => mode = 1}>search</button>\r\n        <button on:click={() => mode = 2}>custom</button>\r\n    </div>\r\n    <div class=\"options\">\r\n        {#if mode == 2}\r\n            url: <input type=\"text\" bind:value={customUrl}><br>\r\n        {:else}\r\n            {#if mode == 0}\r\n                username: u/<input type=\"text\" bind:value={username}><br>\r\n                category: \r\n                <select bind:value={selectedCategory}>\r\n                    {#each userCategories as category}\r\n                    <option value={category}>{category}</option>\r\n                    {/each}\r\n                </select><br>\r\n            {/if}\r\n            search: <input type=\"text\" bind:value={keywordsStr} placeholder='keywords split by \" ,;\"'><br>\r\n            subreddits: <input type=\"text\" bind:value={subsStr} placeholder='keywords split by \" ,;\"'><br>\r\n        {/if}\r\n        count: <input type=\"number\" bind:value={options.count}><br>\r\n        nsfw: <input type=\"checkbox\" bind:checked={options.nsfw}>\r\n    </div>\r\n    <button on:click={load}>load</button>\r\n</div>","import { images } from \"../../store\";\r\nexport async function getJSONData(dir) {\r\n    const response = await fetch(dir);\r\n    const data = await response.json();\r\n    return data;\r\n}\r\nexport async function getImgFromUrl(url) {\r\n    return new Promise((res, reject) => {\r\n        let i = new Image();\r\n        i.src = url;\r\n        i.onload = function () {\r\n            res(i);\r\n        };\r\n        i.onerror = function (e, status) {\r\n            reject();\r\n        };\r\n    });\r\n}\r\nexport async function getImgDimensions(url) {\r\n    const img = await getImgFromUrl(url);\r\n    return [img.width, img.height];\r\n}\r\nexport async function imgToGrid(index, url) {\r\n    const [w, h] = await getImgDimensions(url);\r\n    return {\r\n        ratio: w / h,\r\n        items: [index]\r\n    };\r\n}\r\nexport async function drawImgFill(ctx, url, x, y, width, height) {\r\n    const img = await getImgFromUrl(url);\r\n    const imgRatio = img.width / img.height;\r\n    const boxRatio = width / height;\r\n    let cropWidth = imgRatio > boxRatio ? (boxRatio / imgRatio) * img.width : img.width;\r\n    let cropHeight = imgRatio > boxRatio ? img.height : (imgRatio / boxRatio) * img.height;\r\n    let centerX = (img.width - cropWidth) / 2;\r\n    let centerY = (img.height - cropHeight) / 2;\r\n    ctx.drawImage(img, centerX, centerY, cropWidth, cropHeight, x, y, width, height);\r\n}\r\nexport function fitDimsToRatio(width, height, actualRatio) {\r\n    const desiredRatio = width / height;\r\n    if (desiredRatio > actualRatio)\r\n        width *= actualRatio / desiredRatio;\r\n    else\r\n        height *= desiredRatio / actualRatio;\r\n    return [width, height];\r\n}\r\nexport function drawGridFit(ctx, grid, x, y, width, height, margin = 0) {\r\n    console.log(x, y, width, height);\r\n    let [w, h] = fitDimsToRatio(width, height, grid.ratio);\r\n    drawGrid(ctx, grid, x, y, w + margin, h + margin, margin);\r\n    return [w, h];\r\n}\r\nexport async function drawGrid(ctx, grid, x, y, width, height, margin = 0) {\r\n    if (grid.horizontal == undefined || typeof grid.items[0] == \"number\") {\r\n        let index = grid.items[0];\r\n        if (index < 0)\r\n            return;\r\n        const link = await images.getLink(index);\r\n        drawImgFill(ctx, link, x, y, width - margin, height - margin);\r\n        return;\r\n    }\r\n    let offset = 0;\r\n    if (grid.horizontal == true) {\r\n        for (let item of grid.items) {\r\n            let itemWidth = (item.ratio / grid.ratio) * width;\r\n            drawGrid(ctx, item, x + offset, y, itemWidth, height, margin);\r\n            offset += itemWidth;\r\n        }\r\n    }\r\n    else {\r\n        for (let item of grid.items) {\r\n            let itemHeight = (grid.ratio / item.ratio) * height;\r\n            drawGrid(ctx, item, x, y + offset, width, itemHeight, margin);\r\n            offset += itemHeight;\r\n        }\r\n    }\r\n}\r\n/*function addMarginToGrid(grid, width: number, height: number, margin = 5) {\r\n    if(grid.horizontal == undefined || typeof grid.items[0] == \"number\" )\r\n        return grid;\r\n    \r\n    const count = grid.items.length;\r\n    let newItems = [];\r\n    let newRatio;\r\n    if(grid.horizontal == true) {\r\n        let spacePercenteage = margin / width;\r\n        let spaceRatio = grid.ratio * spacePercenteage;\r\n        for(let i = 0; i < count; i++) {\r\n            let item = grid.items[i];\r\n            let itemWidth = (item.ratio / grid.ratio) * width;\r\n            if(i > 0) newItems.push({ ratio: spaceRatio, items: [-1]});\r\n            newItems.push(\r\n                addMarginToGrid(item, itemWidth, height, margin)\r\n            );\r\n        }\r\n        newRatio = newItems.reduce((prev, curr) => prev + curr.ratio, 0);\r\n    } else {\r\n        //let spaceRatio = width / margin;\r\n        let spacePercenteage = margin / height;\r\n        let spaceRatio = grid.ratio * (1 / spacePercenteage);\r\n        for(let i = 0; i < count; i++) {\r\n            let item = grid.items[i];\r\n            let itemWidth = (item.ratio / grid.ratio) * width;\r\n            if(i > 0) newItems.push({ ratio: spaceRatio, items: [-1]});\r\n            newItems.push(\r\n                addMarginToGrid(item, itemWidth, height, margin)\r\n            );\r\n        }\r\n        newRatio = 1 / newItems.reduce((prev, curr) => prev + 1 / curr.ratio, 0);\r\n    }\r\n    return {\r\n        ratio: newRatio,\r\n        horizontal: grid.horizontal,\r\n        items: newItems\r\n    }\r\n}*/ \r\n","<script lang=\"ts\">\r\nimport { onMount } from \"svelte\";\r\n\r\nimport { test } from \"./generatorFunctions\";\r\nimport { drawGridFit } from \"./helper\";\r\n\r\n    let canvas: HTMLCanvasElement;\r\n    let ctx: CanvasRenderingContext2D;\r\n    onMount(() => {\r\n        ctx = canvas.getContext(\"2d\");\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.imageSmoothingQuality = \"high\";\r\n    });\r\n    let width = 1280;//1201.6332651194605\r\n    let height = 720;\r\n    let margin = 5;\r\n    let border = 10;\r\n    let bg = \"#F5DEB3\";\r\n\r\n    let dimensions: [number, number] = [width, height];\r\n\r\n    async function drawCollage() {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        ctx.fillStyle = bg;\r\n        ctx.clearRect(0, 0, width, height);\r\n        ctx.fillRect(0, 0, width, height);\r\n        const grid = await test(width / height);\r\n        \r\n        const [w, h] = drawGridFit(ctx, grid, border, border, width - (border * 2), height - (border * 2), margin);\r\n        dimensions = [w + border*2, h + border*2];\r\n    }\r\n\r\n    async function snapshot1() {\r\n        const [w, h] = dimensions;\r\n        console.log(dimensions);\r\n        const newCanvas = document.createElement('canvas');\r\n        newCanvas.width = w;\r\n        newCanvas.height = h;\r\n        newCanvas.getContext('2d')    \r\n        .drawImage(canvas, 0, 0);\r\n        const url = newCanvas.toDataURL();\r\n        let link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = 'collage.png';\r\n        link.click();\r\n    }\r\n    async function snapshot() {\r\n        const [w, h] = dimensions;\r\n        const bitmap = await createImageBitmap(canvas);\r\n        canvas.width = w;\r\n        canvas.height = h;\r\n        ctx.drawImage(bitmap, 0, 0);\r\n        const url = canvas.toDataURL();\r\n        let link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = 'collage.png';\r\n        link.click();\r\n    }\r\n\r\n</script>\r\n\r\n\r\n<div class=\"collagesContainer\">\r\n    <div class=\"settings\">\r\n        width: <input type=\"number\" bind:value={width} />\r\n        height: <input type=\"number\" bind:value={height} />\r\n        margin: <input type=\"number\" bind:value={margin} />\r\n        border: <input type=\"number\" bind:value={border} />\r\n        background: <input type=\"color\" bind:value={bg} />\r\n        <button on:click={drawCollage}>generate</button>\r\n    </div>\r\n    <div class=\"display\">\r\n        <canvas bind:this={canvas} height={height} width={width}></canvas>\r\n    </div>\r\n    <button on:click={snapshot}>snapshot</button>\r\n</div>\r\n\r\n\r\n<style>\r\n    .collagesContainer {\r\n        display: flex;\r\n        flex-flow: column;\r\n    }\r\n    canvas {\r\n        max-width: 100%;\r\n        background: wheat;\r\n    }\r\n</style>","import { imgToGrid } from \"./helper\";\r\nimport { images } from \"../../store\";\r\nimport \"idb-keyval\";\r\nfunction primeFactors(n) {\r\n    const factors = [];\r\n    let divisor = 2;\r\n    while (n >= 2) {\r\n        if (n % divisor == 0) {\r\n            factors.push(divisor);\r\n            n = n / divisor;\r\n        }\r\n        else {\r\n            divisor++;\r\n        }\r\n    }\r\n    return factors;\r\n}\r\nfunction ratioDiff(ratio1, ratio2) {\r\n    ratio1 = ratio1 > 1 ? 1 / ratio1 : ratio1;\r\n    ratio2 = ratio2 > 1 ? 1 / ratio2 : ratio2;\r\n    return ratio1 > ratio2 ? 1 - ratio2 / ratio1 : 1 - ratio1 / ratio2;\r\n}\r\nexport async function test(canvasRatio) {\r\n    /*--- LOAD DATA ---*/\r\n    let imagesData = images.get();\r\n    const promises = [];\r\n    // convert images to grids\r\n    for (let i = 0; i < imagesData.length; i++) {\r\n        let img = imagesData[i];\r\n        promises.push(imgToGrid(i, img.url));\r\n    }\r\n    const settled = await Promise.allSettled(promises);\r\n    let imgGrids = settled.filter(x => x.status == \"fulfilled\")\r\n        .map(x => x.value);\r\n    /*--- PROCESS DATA (create grid structure) ---*/\r\n    let grids = imgGrids;\r\n    // determine number of rows\r\n    const count = grids.length;\r\n    grids = [...grids].sort((a, b) => a.ratio - b.ratio);\r\n    let ratio = grids.reduce((prev, curr) => prev + curr.ratio, 0);\r\n    const average = ratio / count;\r\n    ratio = grids.reduce((prev, curr) => prev + Math.sqrt(average / curr.ratio) * curr.ratio, 0);\r\n    const rows = Math.round(Math.sqrt(ratio / canvasRatio));\r\n    const size = ratio / rows;\r\n    // split into rows\r\n    let pivots = [];\r\n    let currSize = 0;\r\n    let prevDiff = 0;\r\n    let elCount = 0;\r\n    for (let i = 0; i < grids.length; i++) {\r\n        const averageRatio = currSize / elCount;\r\n        let diff = size * Math.sqrt(averageRatio / average) - currSize;\r\n        if (diff < 0) {\r\n            let isPrevious = prevDiff < -diff;\r\n            pivots.push(isPrevious ? i - 1 : i);\r\n            currSize = isPrevious ? grids[i - 1].ratio : 0;\r\n            elCount = 0;\r\n        }\r\n        currSize += grids[i].ratio;\r\n        elCount++;\r\n        prevDiff = diff;\r\n    }\r\n    // generate grid\r\n    let previous = 0;\r\n    let newGrids = [];\r\n    pivots.push(grids.length);\r\n    for (let pivot of pivots) {\r\n        const row = grids.slice(previous, pivot);\r\n        const ratios = row.map(x => x.ratio);\r\n        const rowSize = ratios.reduce((prev, curr) => prev + curr, 0);\r\n        newGrids.push({\r\n            ratio: rowSize,\r\n            horizontal: true,\r\n            items: [...row]\r\n        });\r\n        previous = pivot;\r\n    }\r\n    const ratios = newGrids.map(x => x.ratio);\r\n    const ColumnRatio = 1 / ratios.reduce((prev, curr) => prev + 1 / curr, 0);\r\n    const finalGrid = {\r\n        ratio: ColumnRatio,\r\n        horizontal: false,\r\n        items: [...newGrids]\r\n    };\r\n    //sort images\r\n    function avgRowPos(grid) {\r\n        let sum = grid.items.reduce((prev, curr) => prev + curr.items[0], 0);\r\n        return sum / grid.items.length;\r\n    }\r\n    finalGrid.items.sort((a, b) => avgRowPos(a) - avgRowPos(b));\r\n    for (let grid of finalGrid.items) {\r\n        grid.items.sort((a, b) => a.items[0] - b.items[0]);\r\n    }\r\n    return finalGrid;\r\n}\r\n","<script lang=\"ts\">\nimport Gallery from \"./components/Gallery/index.svelte\";\nimport ImgUploader from \"./components/ImgUploader.svelte\";\nimport RedditUploader from \"./components/RedditUploader/index.svelte\";\nimport Collage from \"./components/Collage/index.svelte\";\n\n</script>\n\n<main>\n\t<h1>1. Choose images</h1>\n\t<RedditUploader />\n\t<ImgUploader />\n\t<h1>2. Manage images</h1>\n\t<Gallery />\n\n\t<h1>3. Generate Collage</h1>\n\t<Collage />\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 0.9em;\n\t\tmargin: 0 auto;\n\t}\n\th1 {\n\t\tcolor: #ffdd00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","subscribe","store","callbacks","unsub","unsubscribe","get_store_value","value","_","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","to_number","set_input_value","input","select_option","select","option","__value","selected","selectedIndex","toggle_class","toggle","classList","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","bubble","type","slice","call","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","create_component","mount_component","customElement","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","promisifyRequest","request","reject","oncomplete","onsuccess","result","onabort","onerror","error","createStore","dbName","storeName","indexedDB","open","onupgradeneeded","createObjectStore","dbp","txMode","db","transaction","objectStore","defaultGetStoreFunc","defaultGetStore","get","key","customStore","set","put","del","eachCursor","openCursor","continue","getAll","getAllKeys","all","values","items","cursor","entries","entry","updater","err","idb","wIDatabase","initValue","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","writable","storedValue","val","images","old","indexes","_a","FullResKey","idb.del","x","getLink","async","item","idb.get","createImagesCollection","img","src","img_src_value","img_alt_value","item_changes","div2","div0","button0","button1","button2","div1","r","each_blocks","Number","$$invalidate","fromEntries","$images","resizeImg","targetArea","canvas","getContext","Image","onload","getImageFromUrl","area","width","height","scale","Math","sqrt","round","drawImage","toDataURL","saveImageURL","file","reader","FileReader","readAsDataURL","newImg","maxArea","limit","console","log","Date","now","toString","idb.set","saveLargeImage","e","files","fetchReddit","res","fetch","status","json","if_block","create_if_block_1","input0","br0","input1","br1","br","create_if_block","count","checked","nsfw","button3","splitToItems","s","split","lab","trim","selectedCategory","mode","customUrl","subsStr","keywordsStr","username","userCategories","subreddits","keywords","join","parseUrl","parts","posts","baseUrl","includes","toLowerCase","min","some","subreddit","k","title","loadedCount","after","getPosts","post","url_overridden_by_dest","selected_option","querySelector","select_value","getImgFromUrl","imgToGrid","w","h","getImgDimensions","ratio","drawGridFit","grid","y","margin","actualRatio","desiredRatio","fitDimsToRatio","drawGrid","undefined","horizontal","imgRatio","boxRatio","cropWidth","cropHeight","centerX","centerY","drawImgFill","offset","itemWidth","itemHeight","input2","input3","input4","canvas_1","imageSmoothingEnabled","imageSmoothingQuality","border","bg","dimensions","fillStyle","clearRect","fillRect","canvasRatio","imagesData","promises","grids","allSettled","sort","reduce","prev","curr","average","pivots","currSize","prevDiff","elCount","averageRatio","diff","isPrevious","previous","newGrids","pivot","row","rowSize","finalGrid","avgRowPos","test","bitmap","createImageBitmap","link","download","click","$$value","main","h10","h11","h12","body"],"mappings":"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"}